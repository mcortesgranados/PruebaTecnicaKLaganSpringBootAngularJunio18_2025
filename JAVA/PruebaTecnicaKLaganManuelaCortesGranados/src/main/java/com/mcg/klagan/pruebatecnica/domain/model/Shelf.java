package com.mcg.klagan.pruebatecnica.domain.model;

import java.util.Objects;

/**
 * Shelf represents a domain entity that is part of the Warehouse aggregate.
 *
 * üß± Hexagonal Architecture:
 *   - Ubicada en el **dominio puro**, representa una pieza interna del agregado `Warehouse`.
 *   - No contiene dependencias externas (frameworks, JPA, etc.).
 *   - Es accedida a trav√©s del agregado principal y no de manera directa por capas externas.
 *
 * üßº Clean Architecture:
 *   - Modelo de dominio sin anotaciones ni l√≥gica t√©cnica.
 *   - Representa un objeto de negocio con atributos relevantes para las reglas de estanter√≠as.
 *   - Gestionada desde el `Warehouse` aggregate, no desde fuera.
 *
 * üìê Domain-Driven Design (DDD):
 *   - Entidad de dominio con identidad propia (`id`) y parte del agregado `Warehouse`.
 *   - Tiene una relaci√≥n impl√≠cita con su ra√≠z (`warehouseId`), que es controlada por el agregado.
 *   - No debe ser modificada sin pasar por el `Warehouse`, quien mantiene la integridad del conjunto.
 *
 * üìê Principios SOLID:
 * ------------------------------------------------------------------------------
 * ‚úÖ SRP (Single Responsibility Principle):
 *   - Representa solo una estanter√≠a dentro del dominio del almac√©n.
 *
 * ‚úÖ OCP (Open/Closed Principle):
 *   - Puede extenderse (por ejemplo, agregar validaciones de tipo) sin modificar su estructura b√°sica.
 *
 * ‚úÖ LSP (Liskov Substitution Principle):
 *   - Se comporta correctamente al sustituir a otras entidades similares con contrato compatible.
 *
 * ‚ùå ISP / DIP: No aplican directamente a esta clase, que no representa una interfaz o dependencia.
 *
 * üìå Importante:
 *   - No debe tener l√≥gica de persistencia (como anotaciones @Entity).
 *   - No deber√≠a ser usada fuera del contexto de `Warehouse`.
 *
 * Autor: Manuela Cort√©s Granados
 * Desde: 19 Junio 2025
 */
public class Shelf {

    /**
     * Identificador √∫nico de la estanter√≠a (opcional en creaci√≥n).
     */
    private Long id;

    /**
     * Tipo de estanter√≠a (A, B, C o D), definido por el enum {@link ShelfType}.
     */
    private ShelfType type;

    /**
     * Identificador del almac√©n al que pertenece esta estanter√≠a.
     * Importante para mantener la trazabilidad sin acoplamiento directo.
     */
    private Long warehouseId;

    // --- Getters y Setters ---

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public ShelfType getType() {
        return type;
    }

    public void setType(ShelfType type) {
        this.type = type;
    }

    public Long getWarehouseId() {
        return warehouseId;
    }

    public void setWarehouseId(Long warehouseId) {
        this.warehouseId = warehouseId;
    }

    // --- Equals & HashCode (basados en ID para colecciones y pruebas) ---

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Shelf)) return false;
        Shelf shelf = (Shelf) o;
        return Objects.equals(id, shelf.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }
}
